[
  ///触发字典：
  ///	  能量堆满
  ///	  能量获得
  ///	  血量比例
  ///	  元素
  ///   攻击命中
  ///   受击
  ///   攻击次数/技能次数   堆叠
  ///   某行为之后
  ///   内置cd
  ///   上下场
  ///   缓慢获得
  ///   队友有火/水/xx属性
  ///   使用者是xx属性
  ///   使用者是蒙德/璃月
  ///   队友来自蒙德/璃月
  ///   角色触发了元素反应
  ///   队伍触发元素反应
  ///   触发了指定元素反应
  ///   敌人有xx元素
  ///   受到xx属性伤害
  ///   受到xx元素反应。例如受到冰冻时恢复xx血量。可以成为某些地城的对策。
  ///   x秒内命中多个怪物。
  ///   身边存在x个怪物。
  ///   周围存在燃烧/xx/xx反应时，
  ///
  ///效果字典：
  ///   回血/缓慢持续回血
  ///   全队回血
  ///   最大生命提升
  ///   为血量最低队友回血
  ///   体力恢复速度变化
  ///   暴击伤害变化
  ///   体力恢复
  ///   体力上限
  ///   攻击/防御/速度提升
  ///   全队攻击/防御/速度提升
  ///   受治疗提升
  ///   治疗效果提升
  ///   伤害减轻，xx元素伤害减轻。
  ///   能量获得率提升
  ///   获得能量，释放消耗能量减轻
  ///   获得护盾/元素盾
  ///   攻击提升（堆叠
  ///   全伤提升
  ///   属性伤害提升（类似丹朱圣痕
  ///   体力恢复加快
  ///   技能冷却减少（-20%这种，不是每次-1s这种）
  ///   攻击附带伤害
  ///   给敌人debuff
  ///	  爬山速度提高？
  ///	  重攻击消耗体力减少（大剑）
  ///
  ///	  如果类似fgo，dnf的数值维度。至少应该有
  ///	  攻击力，暴击，爆伤，
  ///	  伤害增加（黄字）
  ///	  宝具威力增加（技能攻击力）
  ///	  某属性伤害增加（属强，红魔放）
  ///
  ///	  招个特效卖卖萌，实际还是上buff。
  ///	  招个怪卖卖萌，实际还是法术场。
  ///
  ///	  一些负面效果，例如减少攻速/移速/血量
  ///	  例如血量永远在50%，高于则燃烧，低于则回血低加成。
  ///
  ///
  ///设计手段：
  ///	  积累一个效果，当xxx时消耗并触发效果
  ///圣遗物效果：
  /// 触发以受击、血量触发为主
  /// 探索中发动。战斗类：探索/辅助/防御=2:8，
  /// buff为主，数值变化。不太会有打击向。
  /// 有套路的效果。   普攻+100%，技能伤害-50%。
  /// Build：
  /// 自身回血时，对周围敌人造成伤害。
  /// 特效套，攻击附带特效技能。
  /// 强化某种单属性伤害。
  ///
  ///负面效果：
  ///	  速度下降
  ///	  cd变长
  ///	  受伤增加等
  ///橙装字典：
  ///	  将敌人弹开
  ///	  持续伤害敌人
  ///	  能量/血量缓慢恢复
  ///	  增加箭的伤害（大概可行
  ///
  //PS：武器的ability是加在角色身上的。可以考虑从天赋里拿创意到武器
  //代码规范：
  //1、attachmodifier。自己加的modifier需要在换武器的时候回收。
  //2、不得在remove时添加modifier，会导致武器卸下后重新上modifier。（不得modifier之间循环调用；A添加B，B添加A需要避免）
  //3、武器技能cd可以用10101技能cd控制，这样就不必添用uniquemodifier的durating控制触发频率了。触发行为应当加检测技能cd的predicates，使得冷却期间不进入具体行为，减少程序消耗。
  //4、实在难以移除的modifier可以在ability的onRemoved中移除。
  //用于记录武器间通用技能的json，需要注意如果群体作用的，需要在描述注明同效果只生效1个。
  //这里开始为正式技能
  ////////////////////////////////////////////////////////////////
  //   后面会是一些脑洞技能测试技能。放到每个武器里实在太难找了，放这里。
  //   后续这里也可能成为金武器的库
  //策划自建函数库：
  //
  //   判断函数
  //
  //   %Rate概率命中后触发，需要触发后回到本ability然后选择执行什么（因为要执行什么是无法传递的）
  //
  //   例如  TriggerOnAttack( IsNormalAttack:1, TriggerRate:0.5，CDratio:0.5)
  //
  //   然后执行函数，
  //
  //   HealHp（HPrate：0.1，Amount：100）
  //
  //   这两句就组成了普攻类命中时50%概率触发回血10%+100点，冷却时间5秒这样的逻辑。
  //
  //   但是这两句没法写到一起。ability也不会返回参数，导致无论判断成功与否，执行成功与否都不会反馈，自然就没法选择下一个操作。
  //
  //   另外执行语句的复用性很低，反而不需要要函数。
]
