[
  ////////////////////////////////////////////////////////////////
  //
  //  ExtraAttack
  //
  ////////////////////////////////////////////////////////////////
  {
    "Default": {
      "$type": "ConfigAbility",
      "abilityName": "Avatar_Qin_ExtraAttack",
      "abilityMixins": [
        {
          "$type": "ButtonHoldChargeMixin",
          "skillID": 10031,
          "chargeTime": 0.12,
          "secondChargeTime": 0.2,
          "OnBeginUncharged": [
            {
              "$type": "SetAnimatorTrigger",
              "triggerID": "DoSkill"
            },
            {
              "$type": "SetAnimatorInt",
              "intID": "SkillID",
              "value": 99,
              "predicates": [
                {
                  "$type": "ByAny",
                  "predicates": [
                    {
                      "$type": "ByAnimatorInt",
                      "value": 0,
                      "parameter": "ComboCount",
                      "logic": "Equal"
                    },
                    {
                      "$type": "ByAnimatorInt",
                      "value": 5,
                      "parameter": "ComboCount",
                      "logic": "Equal"
                    }
                  ]
                }
              ]
            },
            {
              "$type": "SetAnimatorBool",
              "boolID": "IsCharging",
              "value": false
            }
          ],
          "OnReleaseUncharged": [
            /*						{
							"$type": "SetAnimatorTrigger",
							"triggerID": "DoSkill",
						},*/
            {
              "$type": "SetAnimatorInt",
              "intID": "SkillID",
              "value": 1
            }
          ],
          "OnBeginCharged": [
            {
              "$type": "SetAnimatorBool",
              "boolID": "IsCharging",
              "value": true
            }
          ],
          "OnReleaseCharged": [
            {
              "$type": "SetAnimatorBool",
              "boolID": "IsCharging",
              "value": false
            },
            /*						{
							"$type": "SetAnimatorTrigger",
							"triggerID": "DoSkill",
						},*/
            {
              "$type": "SetAnimatorInt",
              "intID": "SkillID",
              "value": 1
            }
            /*						{
							"$type": "ResetAnimatorTrigger",
							"triggerID": "DoSkill",
						},*/
          ],
          "OnBeginSecondCharged": [
            {
              "$type": "SetAnimatorTrigger",
              "triggerID": "DoSkill",
              "predicates": [
                {
                  "$type": "ByLocalAvatarStamina",
                  "stamina": "%ExtraAttack_Sword_Stamina_Cost+%Flexible_Stamina",
                  "logic": "GreaterOrEqual"
                }
              ]
            },
            {
              "$type": "SetAnimatorInt",
              "intID": "SkillID",
              "value": 6,
              "predicates": [
                {
                  "$type": "ByLocalAvatarStamina",
                  "stamina": "%ExtraAttack_Sword_Stamina_Cost+%Flexible_Stamina",
                  "logic": "GreaterOrEqual"
                }
              ]
            },
            {
              "$type": "SetAnimatorBool",
              "boolID": "IsCharging",
              "value": false
            }
            /*						{
							"$type": "ResetAnimatorTrigger",
							"triggerID": "DoSkill",
						},*/
          ],
          "OnReleaseSecondCharged": [],
          "chargeStateIDs": [
            "Attack01",
            "Attack02",
            "Attack03",
            "Attack04",
            "Run"
          ]
        },
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": ["ExtraAttack"],
          "modifierName": "ExtraAttack_StaminaCost"
        }
      ],
      "onAdded": [
        {
          "$type": "ApplyModifier",
          "modifierName": "Qin_ExtraAttack_Detect",
          "target": "Self"
        }
      ],
      "modifiers": {
        "ExtraAttack_StaminaCost": {
          // "duration": 0.2,
          "onAdded": [
            {
              "$type": "AvatarSkillStart",
              "skillID": 10001,
              "costStaminaRatio": "%ExtraAttack_Sword_Stamina_Cost"
            }
          ]
        },
        "Qin_ExtraAttack_Detect": {
          "onAttackLanded": [
            {
              "$type": "ApplyModifier",
              "target": "Target",
              "modifierName": "UNIQUE_Qin_ExtraAttack_WeightDown_Pre",
              "predicates": [
                {
                  "$type": "ByAttackTags",
                  "attackTags": ["ExtraAttack"]
                },
                {
                  "$type": "ByEntityTypes",
                  "entityTypes": ["Monster", "Gadget"]
                },
                {
                  "$type": "ByTargetGlobalValue",
                  "key": "Qin_ExtraAttack_Recently_Lifted",
                  "value": 0,
                  "maxValue": 1,
                  "compareType": "NoneOrEqual"
                }
              ]
            }
          ]
        },
        "UNIQUE_Qin_ExtraAttack_WeightDown_Pre": {
          "isUnique": true,
          "duration": 0.4,
          "onRemoved": [
            {
              "$type": "ApplyModifier",
              "target": "Self",
              "modifierName": "UNIQUE_Qin_ExtraAttack_WeightDown"
            }
          ]
        },
        "UNIQUE_Qin_ExtraAttack_WeightDown": {
          "duration": 3.0,
          "isUnique": true,
          "stacking": "Unique",
          "isLimitedProperties": true,
          "properties": {
            "Actor_AddGravityScale": -1.98
          },
          "onAdded": [
            {
              "$type": "AttachEffect",
              "effectPattern": "Eff_Avatar_Boy_Bow_Venti_Rise_Monster",
              "predicates": [
                {
                  "$type": "ByEntityTypes",
                  "entityTypes": ["Monster", "Gadget"]
                }
              ]
            },
            {
              "$type": "ApplyModifier",
              "modifierName": "Qin_ExtraAttack_Recently_Lifted"
            }
          ]
          /*					"onBeingHit":
					[
						{
							"$type" : "ApplyModifier",
							"modifierName" : "Qin_ExtraAttack_WeightDown_Afterwards",
							"target" : "Self",
							"predicates" :
							[
								{
									"$type" : "ByAttackTags",
									"attackTags" : ["Elemental_Art"],
								},
							],
						},
						{
							"$type" : "RemoveUniqueModifier",
							"modifierName" : "UNIQUE_Qin_ExtraAttack_WeightDown",
							"predicates" :
							[
								{
									"$type" : "ByNot",
									"predicates" :
									[
										{
											"$type" : "ByAttackTags",
											"attackTags" : ["Elemental_Art_Hold"],
										},
									],
								},
							],
						},
					],*/
        },
        "Qin_ExtraAttack_WeightDown_Afterwards": {
          "duration": 1.5,
          "stacking": "Unique",
          "properties": {
            "Actor_AddGravityScale": -1.93
          },
          "onAdded": [
            {
              "$type": "AttachEffect",
              "effectPattern": "Eff_Avatar_Boy_Bow_Venti_Rise_Monster",
              "predicates": [
                {
                  "$type": "ByEntityTypes",
                  "entityTypes": ["Monster", "Gadget"]
                }
              ]
            }
          ]
        },
        "Qin_ExtraAttack_Recently_Lifted": {
          "duration": 6.0,
          "stacking": "Refresh",
          "onAdded": [
            {
              "$type": "AddGlobalValue",
              "key": "Qin_ExtraAttack_Recently_Lifted",
              "value": 1,
              "useLimitRange": true,
              "maxValue": 1,
              "minValue": 0
            }
          ],
          "onRemoved": [
            {
              "$type": "AddGlobalValue",
              "key": "Qin_ExtraAttack_Recently_Lifted",
              "value": -5,
              "useLimitRange": true,
              "maxValue": 1,
              "minValue": 0
            }
          ]
        }
      },
      "abilitySpecials": {
        //故意少判了一点点体力，为了顾及一部分网络延迟
        "ExtraAttack_Sword_Stamina_Cost": 0,
        "Flexible_Stamina": -2
      }
    }
  },
  ////////////////////////////////////////////////////////////////
  //
  //  Vortex Smash
  //
  ////////////////////////////////////////////////////////////////
  {
    "Default": {
      "$type": "ConfigAbility",
      "abilityName": "Avatar_Qin_VortexSmash",
      "onAdded": [
        {
          "$type": "AttachModifier",
          "modifierName": "GenerateElemBall_VortexSmash" //掉球常驻
        }
      ],
      "abilityMixins": [
        {
          "$type": "SkillButtonHoldChargeMixin",
          "skillID": 10033,
          "beforeStateIDs": ["VortexSmash_BS"],
          "chargeLoopStateIDs": ["VortexSmash_Charge_01"],
          "chargeLoopDurations": [5], //5秒其实并不能正确消耗掉体力，会剩一点点。
          "nextLoopTriggerID": "NextLoopTrigger",
          "endHoldTrigger": "EndHoldTrigger"
        },
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": [
            "VortexSmash_BS",
            "VortexSmash_Charge_01",
            "VortexSmash_Strike_01",
            "VortexSmash_Strike"
          ],
          "modifierName": "Initialize"
        },
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": ["VortexSmash_Charge_01"],
          "modifierName": "Charging_Wind"
        },
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": ["VortexSmash_Charge_01"],
          "modifierName": "Charging"
        },
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": ["VortexSmash_Charge_01", "VortexSmash_Strike_01"], //"VortexSmash_BS",
          "modifierName": "Focus"
        },
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": ["VortexSmash_Strike"],
          "modifierName": "Before_VortexSmash" //由于1.1挪走了modifier，导致删除了提早struggle的效果，必须重现这个效果。
        }
      ],
      "onAbilityStart": [
        {
          "$type": "AvatarSkillStart",
          "skillID": 10033,
          "predicates": [
            {
              "$type": "BySkillReady",
              "skillID": 10033
            }
          ]
        },
        {
          "$type": "TriggerAttackEvent",
          "targetType": "Enemy",
          "attackEvent": {
            "attackPattern": {
              "$type": "ConfigAttackBox",
              "triggerType": "TriggerNoRepeat",
              "size": {
                "x": 4.0,
                "y": 2.4,
                "z": 4.1 //原参数为3.0,2.4,2.2
              },
              "born": {
                "$type": "ConfigBornByAttachPoint",
                "attachPointName": "FocusAnchor",
                "offset": {
                  "x": 0.0,
                  "y": 0.4,
                  "z": 0.0
                }
              }
            },
            "attackInfo": {
              "attackTag": "Elemental_Art",
              "attackProperty": {
                "damagePercentage": "%Art_DMG",
                "strikeType": "Default",
                "elementType": "Wind",
                "attackType": "Melee",
                "elementDurability": 50,
                "enBreak": 250
              },
              "hitPattern": {
                "onHitEffectName": "default",
                "hitImpulseType": "LV9",
                // "hitLevel": "Air",	//hitlevel = 9
                // "hitImpulseX": 1200,	//hitlevel = 9
                // "hitImpulseY": 600,	//hitlevel = 9
                "retreatType": "ByHitDirection", //hitlevel = 9
                "reboundRatio": 0,
                "canBeDefenceHalt": false,
                "hitHaltTime": 0.0,
                "hitHaltTimeScale": 0.05,
                "muteHitText": false
              }
            }
          }
        },
        {
          "$type": "TriggerAttackEvent",
          "targetType": "Alliance",
          "attackEvent": {
            "attackPattern": {
              "$type": "ConfigAttackBox",
              "triggerType": "TriggerNoRepeat",
              "size": {
                "x": 4.0,
                "y": 2.4,
                "z": 3.5
              },
              "born": {
                "$type": "ConfigBornByAttachPoint",
                "attachPointName": "FocusAnchor",
                "offset": {
                  "x": 0.0,
                  "y": 0.4,
                  "z": 0.6
                }
              }
            },
            "attackInfo": {
              "attackTag": "Qin_VortexSmash", //这个打击队友用不同的tag，用于避免击中avatar。
              "attackProperty": {
                "damagePercentage": 0.0,
                "strikeType": "Default",
                "elementType": "None",
                "elementDurability": 50,
                "enBreak": 250,
                "attackType": "Melee"
              },
              "hitPattern": {
                "onHitEffectName": "default",
                "hitImpulseType": "LV9",
                // "hitLevel": "Air",	//hitlevel = 9
                // "hitImpulseX": 1200,	//hitlevel = 9
                // "hitImpulseY": 600,	//hitlevel = 9
                "retreatType": "ByHitDirection", //hitlevel = 9
                "reboundRatio": 0,
                "canBeDefenceHalt": false,
                "hitHaltTime": 0.0,
                "hitHaltTimeScale": 0.05,
                "muteHitText": false
              }
            }
          }
        },
        {
          "$type": "ActCameraShake",
          "cameraShake": {
            "shakeType": "Center",
            "shakeRange": 0.36,
            "shakeTime": 0.12,
            "shakeDistance": 30
          },
          "extension": {
            "baseOnCamera": true
          }
        },
        {
          "$type": "ActCameraRadialBlur",
          "cameraRadialBlur": {
            "power": 1,
            "blurTime": 0.25,
            "fadeTime": 0.3
          }
        }
      ],
      "modifiers": {
        //每次重置天赋的数值。
        "Initialize": {
          "modifierMixins": [
            {
              "$type": "ModifyDamageMixin",
              "attackTags": ["Elemental_Art"],
              "damagePercentageRatio": "%DamageRate*%IsCharged"
            }
          ],
          "onAdded": [
            {
              "$type": "AttachModifier",
              "doOffStage": true,
              "modifierName": "DetectAttackLanded",
              "target": "Self"
            },
            {
              "$type": "SetOverrideMapValue",
              "overrideMapKey": "Strength",
              "value": 2
            },
            {
              "$type": "SetOverrideMapValue",
              "overrideMapKey": "IsCharged",
              "value": 0
            },
            {
              "$type": "AddGlobalValue",
              "key": "_ABILITY_Qin_VortexSmash_IsCharged",
              "value": 0,
              "useLimitRange": true,
              "maxValue": 0,
              "minValue": 0
            },
            {
              //在发动攻击之前，将队友都加上reject，这样就不会被击飞了。
              "$type": "ApplyModifier",
              "modifierName": "Reject_Push",
              "target": "AllPlayerAvatars"
            }
          ]
        },
        //这个是攻击盒、cd相关
        "Charging": {
          "onRemoved": [
            {
              "$type": "AvatarSkillStart", //攻击之前就会进入cd
              "skillID": 10033,
              "predicates": [
                {
                  "$type": "BySkillReady",
                  "skillID": 10033
                }
              ]
            }
          ],
          "thinkInterval": 0.15,
          "onThinkInterval": [
            {
              "$type": "TriggerAttackEvent",
              "targetType": "Enemy",
              "attackEvent": {
                "attackPattern": {
                  "$type": "ConfigAttackBox",
                  "triggerType": "TriggerNoRepeat",
                  "size": {
                    "x": 2.0,
                    "y": 2.0,
                    "z": 2.5
                  },
                  "born": {
                    "$type": "ConfigBornByAttachPoint",
                    "attachPointName": "FocusAnchor",
                    "offset": {
                      "x": 0.0,
                      "y": 0.0,
                      "z": 0.0
                    }
                  }
                },
                "attackInfo": {
                  "attackTag": "VortexSmash_Detect",
                  "attackProperty": {
                    "damagePercentage": 0.0,
                    "elementType": "None",
                    "elementDurability": 50,
                    "enBreak": 0
                  },
                  "hitPattern": {
                    "hitImpulseType": "LV0"
                    //		"hitLevel" : "Air",
                    //		"hitImpulseX" : 0,
                    //		"hitImpulseY" : 160,
                    //		"reboundRatio" : 0,
                    //		"hitHaltTime" : 0.0,
                    //		"hitHaltTimeScale" : 0.05,
                    //		"muteHitText" : false,
                  }
                  //	"forceCameraShake": false,
                  //	"cameraShake": {},
                }
              }
            }
          ]
        },
        //镜头相关
        "Focus": {
          "onAdded": [
            {
              "$type": "AvatarEnterFocus",
              "cameraFollowLower": {
                "x": 0.5,
                "y": 0.0,
                "z": -2.5
              },
              "cameraFollowUpper": {
                "x": 0.3,
                "y": -0.2,
                "z": 0.0
              },
              "cameraFastFocusMode": true,
              "dragButtonName": "Skill2",
              "assistance": {
                "ps4": {
                  "useGyro": false
                },
                "ps5": {
                  "useGyro": false
                },
                "other": {
                  "useGyro": true
                }
              },
              "canMove": false
            }
          ],
          "onRemoved": [
            {
              "$type": "AvatarExitFocus",
              "keepRotation": true
            }
          ]
        },
        //这个是风场相关，天赋相关，击飞保护相关。
        "Charging_Wind": {
          "onAdded": [
            //这个是命之座1改变特效和伤害的入口。进行1秒计时。
            {
              "$type": "AttachModifier",
              "modifierName": "VortexSmash_TalentTimer",
              "predicates": [
                {
                  "$type": "ByUnlockTalentParam",
                  "talentParam": "Stronger_VortexSmash"
                }
              ]
            },
            {
              //在发动攻击之前，将队友都加上reject，这样就不会被击飞了。
              "$type": "ApplyModifier",
              "modifierName": "Reject_Push",
              "target": "AllPlayerAvatars"
            }
          ],
          "thinkInterval": 1,
          "onThinkInterval": [
            {
              //在发动攻击之前，将队友都加上reject，这样就不会被击飞了。
              "$type": "ApplyModifier",
              "modifierName": "Reject_Push",
              "target": "AllPlayerAvatars"
            }
          ],
          "modifierMixins": [
            {
              "$type": "WindZoneMixin",
              "shapeName": "CircleR10",
              "strength": "%Strength",
              "attenuation": "%Attenuation",
              "born": {
                "$type": "ConfigBornByAttachPoint",
                "attachPointName": "FocusAnchor",
                "offset": {
                  "x": 0.4,
                  "y": 0.0,
                  "z": 1.8
                }
              },
              "targetType": "All",
              "predicates": [
                {
                  "$type": "ByTargetWeight", //WindZoneLevel = 1
                  "logic": "LesserOrEqual", //WindZoneLevel = 1
                  "weight": 150.0 //WindZoneLevel = 1//从原先100提升到150
                },
                {
                  "$type": "ByEntityTypes",
                  "entityTypes": ["Avatar"],
                  "reject": true
                }
              ]
            },
            {
              "$type": "CostStaminaMixin",
              "costStaminaDelta": "%StaminaCost",
              "onStaminaEmpty": [
                {
                  "$type": "SetAnimatorTrigger",
                  "triggerID": "EndHoldTrigger"
                }
              ]
            },
            //控制不同天赋下的特效变化。
            {
              "$type": "AttachModifierToSelfGlobalValueMixin",
              "globalValueKey": "_ABILITY_Qin_VortexSmash_IsCharged",
              "valueSteps": [-0.5, 0.5, 1.5],
              "modifierNameSteps": ["Effect_Control1", "Effect_Control2"],
              "removeAppliedModifier": false
            }
          ]
        },
        "VortexSmash_TalentTimer": {
          "duration": 1.05,
          "thinkInterval": 1, //略微考虑一点延迟。
          "onThinkInterval": [
            {
              "$type": "SetOverrideMapValue",
              "overrideMapKey": "Strength",
              "value": 4
            },
            {
              "$type": "AddGlobalValue",
              "key": "_ABILITY_Qin_VortexSmash_IsCharged",
              "value": 1
            },
            {
              "$type": "SetOverrideMapValue",
              "overrideMapKey": "IsCharged",
              "value": 1
            },
            //建议有震屏提示
            {
              "$type": "ActCameraShake",
              "cameraShake": {
                "shakeType": "Center",
                "shakeRange": 0.12,
                "shakeTime": 0.15,
                "shakeDistance": 10,
                "extension": {
                  "baseCycle": 0.08,
                  "cycleDamping": -0.04
                }
              }
            }
          ],
          //由于特效发动需要时间，删除特效就晚一些。
          "onRemoved": [
            {
              "$type": "RemoveModifier",
              "modifierName": "Effect_Control1"
            }
          ]
        },
        //普通特效
        "Effect_Control1": {
          "onAdded": [
            {
              "$type": "AttachEffect",
              "effectPattern": "Eff_Avatar_VortexSmash_Charge_01"
            }
          ]
        },
        //天赋开启时会播放更强特效
        "Effect_Control2": {
          "onAdded": [
            {
              "$type": "AttachEffect",
              "effectPattern": "Eff_Avatar_VortexSmash_Charge_02"
            }
          ]
        },
        //得想办法在打击之前将范围内的队友都加上不会被hit的效果。包括吸引的时候，包括hit的时候。
        "Reject_Push": {
          "duration": 2,
          "modifierMixins": [
            {
              "$type": "RejectAttackMixin",
              "attackTag": "Qin_VortexSmash"
            }
          ]
        },
        //上的间隔0.15秒，持续0.25秒  ，只持续0.2的时候会出现怪退出struggle的问题。
        "Drag": {
          "duration": 0.5, // thinkinterval可能有问题，导致0.2秒不够覆盖interval
          "state": "Struggle"
        },
        "DetectAttackLanded": {
          "onAttackLanded": [
            {
              "$type": "ApplyModifier",
              "modifierName": "Collision",
              "target": "Target",
              "predicates": [
                {
                  "$type": "ByAttackTags",
                  "attackTags": ["Elemental_Art"]
                },
                {
                  "$type": "ByEntityTypes",
                  "entityTypes": ["Avatar"],
                  "reject": true
                }
              ]
            },
            {
              "$type": "ApplyModifier",
              "modifierName": "Drag",
              "target": "Target",
              "predicates": [
                {
                  "$type": "ByAttackTags",
                  "attackTags": ["VortexSmash_Detect"]
                },
                {
                  "$type": "ByTargetWeight", //WindZoneLevel = 1
                  "logic": "LesserOrEqual", //WindZoneLevel = 1
                  "weight": 100.0 //WindZoneLevel = 1
                },
                {
                  "$type": "ByEntityTypes",
                  "entityTypes": ["Avatar"],
                  "reject": true
                }
              ]
            },
            {
              "$type": "ApplyModifier",
              "modifierName": "Drag2",
              "target": "Target",
              "predicates": [
                {
                  "$type": "ByAttackTags",
                  "attackTags": ["VortexSmash_Detect_Short"]
                },
                {
                  "$type": "ByTargetWeight", //WindZoneLevel = 1
                  "logic": "LesserOrEqual", //WindZoneLevel = 1
                  "weight": 100.0 //WindZoneLevel = 1
                },
                {
                  "$type": "ByEntityTypes",
                  "entityTypes": ["Avatar"],
                  "reject": true
                }
              ]
            }
          ]
        },
        "Collision": {
          //"duration": 5.0,
          "modifierMixins": [
            {
              "$type": "VelocityDetectMixin",
              "minSpeed": 1.0,
              "maxSpeed": 1.0,
              "onNegedge": [
                {
                  "$type": "RemoveModifier",
                  "modifierName": "Collision"
                }
              ]
            }
          ],
          "onAdded": [
            {
              "$type": "AttachEffect",
              "effectPattern": "Eff_Avatar_VortexSmash_Trail01"
            }
          ],
          "onCrash": [
            {
              "$type": "RemoveModifier",
              "modifierName": "Collision"
            }
          ]
        },
        "GenerateElemBall_VortexSmash": {
          "onAttackLanded": [
            {
              "$type": "Predicated",
              "target": "Target",
              "targetPredicates": [
                {
                  "$type": "ByAttackTags",
                  "attackTags": ["Elemental_Art"]
                },
                {
                  "$type": "ByEntityTypes",
                  "entityTypes": ["Monster"]
                },
                {
                  "$type": "ByTargetGlobalValue",
                  "key": "_ANIMAL_ENTITY_TYPE",
                  "value": 0,
                  "compareType": "NoneOrEqual"
                }
              ],
              "successActions": [
                {
                  "$type": "RemoveModifier", //在这里搭车回收一下drag这个modifier
                  "target": "Target",
                  "modifierName": "Drag"
                },
                {
                  "$type": "RemoveModifier", //在这里搭车回收一下drag这个modifier
                  "target": "Target",
                  "modifierName": "Drag2"
                },
                {
                  "$type": "ApplyModifier",
                  "modifierName": "Ball",
                  "target": "Self"
                },
                {
                  "$type": "ApplyModifier",
                  "modifierName": "Ball_Extra",
                  "target": "Self"
                }
              ]
            }
          ]
        },
        "Ball": {
          "duration": 0.3,
          "stacking": "Unique",
          "onAdded": [
            {
              "$type": "Randomed",
              "chance": 1.0,
              "successActions": [
                {
                  "$type": "GenerateElemBall",
                  "configID": 2021,
                  "baseEnergy": 6,
                  "ratio": "%GetElementRatio",
                  "born": {
                    "$type": "ConfigBornByTarget",
                    "offset": {
                      "x": 0.0,
                      "y": 0.0,
                      "z": 1.0
                    }
                  }
                }
              ]
            }
          ]
        },
        "Ball_Extra": {
          "duration": 1.0,
          "stacking": "Unique",
          "onAdded": [
            {
              "$type": "Randomed",
              "chance": 0.67,
              "successActions": [
                {
                  "$type": "GenerateElemBall",
                  "configID": 2021,
                  "baseEnergy": 3,
                  "ratio": "%GetElementRatio",
                  "born": {
                    "$type": "ConfigBornByTarget",
                    "offset": {
                      "x": 0.0,
                      "y": 0.0,
                      "z": 1.0
                    }
                  }
                }
              ]
            }
          ]
        },
        //为了还原1.0，必须有原来只有0.2秒的drag
        "Drag2": {
          "duration": 0.2,
          "state": "Struggle"
        },
        "Before_VortexSmash": {
          "onAdded": [
            {
              "$type": "ApplyModifier",
              "modifierName": "Reject_Push",
              "target": "AllPlayerAvatars"
            },
            {
              "$type": "TriggerAttackEvent",
              "targetType": "Enemy",
              "attackEvent": {
                "attackPattern": {
                  "$type": "ConfigAttackBox",
                  "triggerType": "TriggerNoRepeat",
                  "size": {
                    "x": 2.0,
                    "y": 2.0,
                    "z": 2.5
                  },
                  "born": {
                    "$type": "ConfigBornByAttachPoint",
                    "attachPointName": "FocusAnchor",
                    "offset": {
                      "x": 0.0,
                      "y": 0.0,
                      "z": 0.0
                    }
                  }
                },
                "attackInfo": {
                  "attackTag": "VortexSmash_Detect_Short",
                  "attackProperty": {
                    "damagePercentage": 0.0,
                    "elementType": "None",
                    "elementDurability": 50,
                    "enBreak": 0
                  },
                  "hitPattern": {
                    "hitImpulseType": "LV0"
                    //		"hitLevel" : "Air",
                    //		"hitImpulseX" : 0,
                    //		"hitImpulseY" : 160,
                    //		"reboundRatio" : 0,
                    //		"hitHaltTime" : 0.0,
                    //		"hitHaltTimeScale" : 0.05,
                    //		"muteHitText" : false,
                  }
                  //	"forceCameraShake": false,
                  //	"cameraShake": {},
                }
              }
            }
          ]
        }
      },
      "abilitySpecials": {
        "GetElementRatio": 1.0,
        "Art_DMG": 0,
        "Attenuation": 2,
        "Strength": 2,
        "StaminaCost": 0,
        "DamageRate": 0,
        "IsCharged": 0
      }
    }
  },

  ////////////////////////////////////////////////////////////////
  //
  //  DandelionWind
  //
  ////////////////////////////////////////////////////////////////
  {
    //技能开始的镜头和特效支持
    "Default": {
      "$type": "ConfigAbility",
      "abilityName": "Avatar_Qin_DandelionWind_Camera",
      "onAbilityStart": [
        {
          "$type": "AvatarEnterCameraShot",
          "cameraMoveCfgPath": "Camera_Qin_DandelionWind",
          "predicates": [
            {
              "$type": "ByAttackNotHitScene",
              "attackPattern": {
                "$type": "ConfigAttackCircle",
                "triggerType": "TriggerNoRepeat",
                "height": 0.2,
                "fanAngle": 30.0,
                "radius": 0.8,
                "born": {
                  "$type": "ConfigBornBySelf",
                  "offset": {
                    "x": 0.0,
                    "y": 1.2,
                    "z": 0.0
                  }
                }
              }
            },
            {
              "$type": "ByAvatarInWaterDepth",
              "compareType": "LessAndEqual",
              "depth": 0.5
            }
          ]
        }
      ],
      "abilityMixins": [
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": ["DandelionWind"],
          "modifierName": "Tornado_Eff"
        },
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": ["DandelionWind"],
          "modifierName": "isGhost"
        },
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": ["DandelionWind", "DandelionWind_Out"],
          "modifierName": "DandelionWind_Camera_Handler_1"
        },
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": ["DandelionWind", "DandelionWind_Out"],
          "modifierName": "DandelionWind_Camera_Handler_2"
        },
        // {
        // 	"$type":"AttachToStateIDMixin",
        // 	"stateIDs":["DandelionWind","DandelionWind_Out",],
        // 	"modifierName":"camera_extra"
        // },
        {
          "$type": "AttachToNormalizedTimeMixin", //删除释放技能按键缓存，防止连续小技能。
          "stateID": "DandelionWind",
          "modifierName": "SetEmission",
          "normalizeStart": 0.16,
          "normalizeEnd": 0.95
        }
      ],
      "modifiers": {
        "isGhost": {
          "state": "Invincible",
          "onAdded": [
            {
              "$type": "AttachAbilityStateResistance",
              "resistanceListID": 11002
            }
          ]
        },
        "Tornado_Eff": {
          "onAdded": [
            {
              "$type": "AttachEffect",
              "effectPattern": "Eff_Qin_DandelionWind_SurroundWind"
            }
          ],
          "modifierMixins": [
            {
              "$type": "WindZoneMixin",
              "shapeName": "CircleR2",
              "strength": -2,
              "targetType": "All",
              "predicates": [
                {
                  "$type": "ByTargetWeight", //WindZoneLevel = 1
                  "logic": "LesserOrEqual", //WindZoneLevel = 1
                  "weight": 150.0 //WindZoneLevel = 1
                },
                {
                  "$type": "ByEntityTypes",
                  "entityTypes": ["Avatar"],
                  "reject": true
                }
              ]
            }
          ]
        },
        //兼职调整背景颜色。
        "DandelionWind_Camera_Handler_1": {
          "onAdded": [
            {
              "$type": "ControlEmotion",
              "toggleBlink": false,
              "toggleEmoSync": false,
              "toggleEyeKey": false
            }
          ],
          "modifierMixins": [
            {
              "$type": "TriggerWeatherMixin",
              "type": "Skill",
              "weatherPattern": "Weather_Default_SkillPreset",
              "transDuration": 0.3, //这个同时是渐入时长和渐出时长。
              "duration": 0.99 //释放时变亮的参数
              // "duration":1.4,//释放时仍然暗的参数,剑变亮时间增长了。
            }
          ],
          "onRemoved": [
            {
              "$type": "SetEmissionScaler",
              "materialType": "Weapon",
              "value": -1,
              "duration": 0.3
            },
            {
              "$type": "ControlEmotion",
              "doOffStage": true,
              "toggleBlink": true,
              "toggleEmoSync": true,
              "toggleEyeKey": true
            }
          ],
          "onAvatarOut": [
            {
              "$type": "SetEmissionScaler",
              "materialType": "Weapon",
              "value": -1,
              "duration": 0.3
            },
            {
              "$type": "ControlEmotion",
              "doOffStage": true,
              "toggleBlink": true,
              "toggleEmoSync": true,
              "toggleEyeKey": true
            }
          ]
        },
        "DandelionWind_Camera_Handler_2": {
          "onRemoved": [
            {
              "$type": "AvatarExitCameraShot",
              "doOffStage": true
            },
            {
              "$type": "AvatarCameraParam",
              "cameraParam": {
                "forceRadius": 6,
                "forceRadiusDuration": 0.6,
                "shouldKeepForceRadius": true
              }
            }
          ],
          "onAvatarOut": [
            {
              "$type": "AvatarExitCameraShot",
              "doOffStage": true
            },
            {
              "$type": "AvatarCameraParam",
              "doOffStage": true,
              "cameraParam": {
                "forceRadius": 6,
                "forceRadiusDuration": 0.6,
                "shouldKeepForceRadius": true
              }
            }
          ]
        },
        "SetEmission": {
          "onAdded": [
            {
              "$type": "SetEmissionScaler", //调整武器发光。配置文件为EquipElementStyle。可以参考神之眼AvatarElementStyle的配置进行配置
              "materialType": "Weapon",
              "useDefaultColor": false,
              "value": 15,
              "duration": 0.3 //渐入渐出时间，这个需要配置在PlusSkillEmission里。
            }
          ],
          "onRemoved": [
            {
              "$type": "SetEmissionScaler",
              "materialType": "Weapon",
              "value": -1,
              "duration": 0.6
            }
          ]
        }
      }
    }
  },
  {
    "Default": {
      "$type": "ConfigAbility",
      "abilityName": "Avatar_Qin_DandelionWind",
      //创建一个法术场,制造治疗
      "onAbilityStart": [
        {
          "$type": "AvatarSkillStart",
          "skillID": 10034
        },
        //治疗field
        {
          "$type": "CreateGadget",
          "gadgetID": 41003004,
          "campID": 1001,
          "campTargetType": "Alliance",
          "born": {
            "$type": "ConfigBornByTarget",
            "offset": {
              "x": 0.0,
              "y": 0.0,
              "z": 0.0
            }
          }
        },
        //伤害field
        {
          "$type": "CreateGadget",
          "gadgetID": 41003005,
          "campID": 1001,
          "campTargetType": "Enemy",
          "born": {
            "$type": "ConfigBornByTarget",
            "offset": {
              "x": 0.0,
              "y": 0.0,
              "z": 0.0
            }
          }
        },
        {
          "$type": "ApplyModifier",
          "modifierName": "RestorEnergy",
          "predicates": [
            {
              "$type": "ByUnlockTalentParam",
              "talentParam": "RestoreEnergy"
            }
          ]
        }
      ],
      "modifiers": {
        "RestorEnergy": {
          "duration": 0.15,
          "onAdded": [
            {
              "$type": "ReviveElemEnergy",
              "value": "%Rate*%ReviveElemEnergyRatio",
              "target": "Self",
              "doOffStage": true
            }
          ]
        }
      },
      "abilitySpecials": {
        "Rate": 0,
        "ReviveElemEnergyRatio": 1
      }
    }
  },
  {
    //技能：给自己进入法术场的角色每秒加攻击力百分比血
    "Default": {
      "$type": "ConfigAbility",
      "abilityName": "Avatar_Qin_DandelionWind_Heal",
      //法术场创生即生效的效果：友军回血
      "onAdded": [
        {
          "$type": "AttachModifier",
          "modifierName": "DandelionWind_Buff" //10秒里慢慢生效效果
        },
        {
          "$type": "AttachModifier",
          "modifierName": "DandelionWind_Field" //各种即时生效效果
        }
      ],
      "modifiers": {
        "DandelionWind_Field": {
          "duration": 10,
          "onAdded": [
            {
              "$type": "AttachEffect",
              "effectPattern": "Eff_Qin_DandelionWind"
            },
            // {//奶6米内队友，npc等。
            // 	"$type": "ApplyModifier",
            // 	"modifierName": "DandelionWind_Field_UniqueHeal",
            // 	"otherTargets":
            // 	{
            // 		"$type": "SelectTargetsByShape",
            // 		"shapeName": "CircleR6",
            // 		"centerBasedOn": "Self",
            // 		"campTargetType": "Alliance",
            // 		"campBasedOn": "Self",
            // 	},
            // 	"predicates":
            // 	[
            // 		{
            // 			"$type" : "ByEntityTypes",
            // 			"entityTypes" : ["Avatar"],
            // 		},
            // 	],
            // },
            {
              //奶40米内联机队友。  //这次不包括路人了，不存在重复奶的情况。不再用modifier了。
              "$type": "HealHP",
              "amountByCasterAttackRatio": "%BurstHeal",
              "amount": "%BurstHealConst",
              "target": "AllPlayerAvatars",
              "predicates": [
                {
                  "$type": "ByTargetPositionToSelfPosition",
                  "compareType": "XZ",
                  "value": 40,
                  "logic": "LesserOrEqual"
                }
              ]
            },
            {
              "$type": "ApplyModifier",
              "modifierName": "Qin_Talent_WindShieldNumSet",
              "otherTargets": {
                "$type": "SelectTargetsByShape",
                "shapeName": "CircleR6",
                "centerBasedOn": "Self",
                "campTargetType": "Alliance",
                "campBasedOn": "Self"
              },
              "predicates": [
                {
                  "$type": "ByEntityTypes",
                  "entityTypes": ["Avatar"]
                },
                {
                  "$type": "ByUnlockTalentParam",
                  "talentParam": "WindShield"
                }
              ]
            },
            {
              "$type": "ApplyModifier",
              "modifierName": "UNIQUE_Talent_WindShield",
              "otherTargets": {
                "$type": "SelectTargetsByShape",
                "shapeName": "CircleR6",
                "centerBasedOn": "Self",
                "campTargetType": "Alliance",
                "campBasedOn": "Self"
              },
              "predicates": [
                {
                  "$type": "ByEntityTypes",
                  "entityTypes": ["Avatar"]
                },
                {
                  "$type": "ByUnlockTalentParam",
                  "target": "Owner",
                  "talentParam": "WindShield"
                }
              ]
            },
            {
              "$type": "ApplyModifier",
              "modifierName": "UNIQUE_Qin_Talent_WindDown",
              "otherTargets": {
                "$type": "SelectTargetsByShape",
                "shapeName": "CircleR6",
                "centerBasedOn": "Self",
                "campTargetType": "Enemy",
                "campBasedOn": "Self"
              },
              "predicates": [
                {
                  "$type": "ByEntityTypes",
                  "entityTypes": ["Monster"]
                },
                {
                  "$type": "ByUnlockTalentParam",
                  "target": "Owner",
                  "talentParam": "WindPressure"
                }
              ]
            }
          ]
        },
        //非UNIQUE,让2个琴都可以刷新这个。
        "Qin_Talent_WindShieldNumSet": {
          "duration": 0.1,
          "onAdded": [
            {
              "$type": "AddGlobalValue",
              "doOffStage": true,
              "key": "_ABILITY_QinWindShield_COUNT",
              "value": 3,
              "useLimitRange": true,
              "maxValue": 3,
              "minValue": 3
            }
          ]
        },
        //奶友军的modifier
        "DandelionWind_Buff": {
          "duration": 10.5,
          "thinkInterval": 1,
          "onThinkInterval": [
            {
              "$type": "HealHP",
              "amountByCasterAttackRatio": "%Heal",
              "amount": "%HealConst",
              "otherTargets": {
                "$type": "SelectTargetsByShape",
                "shapeName": "CircleR6",
                "centerBasedOn": "Self",
                "campTargetType": "Alliance",
                "campBasedOn": "Self"
              },
              "predicates": [
                {
                  "$type": "ByEntityTypes",
                  "entityTypes": ["Avatar"]
                }
              ]
            },
            {
              "$type": "ApplyModifier",
              "modifierName": "UNIQUE_Talent_WindShield",
              "otherTargets": {
                "$type": "SelectTargetsByShape",
                "shapeName": "CircleR6",
                "centerBasedOn": "Self",
                "campTargetType": "Alliance",
                "campBasedOn": "Self"
              },
              "predicates": [
                {
                  "$type": "ByEntityTypes",
                  "entityTypes": ["Avatar"]
                },
                {
                  "$type": "ByUnlockTalentParam",
                  // "target":"Owner",//这个的指定是无意义的，unlock这个总在找Caster的。
                  "talentParam": "WindShield"
                }
              ]
            },
            {
              "$type": "ApplyModifier",
              "modifierName": "Qin_Talent_WindShieldNumSet",
              "otherTargets": {
                "$type": "SelectTargetsByShape",
                "shapeName": "CircleR6",
                "centerBasedOn": "Self",
                "campTargetType": "Alliance",
                "campBasedOn": "Self"
              },
              "predicates": [
                {
                  "$type": "ByEntityTypes",
                  "entityTypes": ["Avatar"]
                },
                {
                  "$type": "ByUnlockTalentParam",
                  "talentParam": "WindShield"
                }
              ]
            },
            {
              "$type": "ApplyModifier",
              "modifierName": "UNIQUE_Qin_Talent_WindDown",
              "otherTargets": {
                "$type": "SelectTargetsByShape",
                "shapeName": "CircleR6",
                "centerBasedOn": "Self",
                "campTargetType": "Enemy",
                "campBasedOn": "Self"
              },
              "predicates": [
                {
                  "$type": "ByEntityTypes",
                  "entityTypes": ["Monster"]
                },
                {
                  "$type": "ByUnlockTalentParam",
                  "target": "Owner",
                  "talentParam": "WindPressure"
                }
              ]
            },
            {
              "$type": "ApplyModifier",
              "modifierName": "UNIQUE_DandelionWind_Buff_WindBuff",
              "otherTargets": {
                "$type": "SelectTargetsByShape",
                "shapeName": "CircleR6",
                "centerBasedOn": "Self",
                "campTargetType": "Alliance",
                "campBasedOn": "Self"
              },
              "predicates": [
                {
                  "$type": "ByEntityTypes",
                  "entityTypes": ["Avatar"]
                }
              ]
            }
          ]
        },
        //
        "UNIQUE_Qin_Talent_WindDown": {
          "isUnique": true,
          "duration": 1.2,
          "isLimitedProperties": true,
          "state": "DefenseDown",
          "properties": {
            // "Animator_OverallSpeedRatio": "%SlowRate",
            "Actor_WindSubHurtDelta": "%WindHurt"
          }
        },
        "UNIQUE_DandelionWind_Buff_WindBuff": {
          "isUnique": true,
          "stacking": "Refresh",
          "duration": 0.2,
          "elementType": "Wind",
          "elementDurability": 25
        },
        "UNIQUE_Talent_WindShield_Timer": {
          "onAdded": [
            {
              "$type": "AttachEffect",
              "effectPattern": "Eff_Avatar_Lady_Sword_Qin_TalentShield"
            },
            {
              "$type": "SetGlobalValue", //先设到外面，这样切回来后必然可以触发。
              "key": "_ABILITY_QinWindShield_COUNT",
              "value": 4,
              "doOffStage": true
            },
            {
              "$type": "SetGlobalValue",
              "key": "_ABILITY_QinWindShield_COUNT",
              "value": 3,
              "doOffStage": true
            }
          ],
          // "duration":10.5,
          "stacking": "Refresh",
          "isUnique": true,
          "modifierMixins": [
            {
              "$type": "AttachModifierToSelfGlobalValueMixin", // 类似于一个永续的转换器，每次全局值越过边界就会applymodifier和执行action.(并不是只在apply时生效一次)
              "globalValueKey": "_ABILITY_QinWindShield_COUNT",
              "valueSteps": [-100, 0.5, 1.5, 2.5, 3.5],
              "defaultGlobalValueOnCreate": 3,
              "removeAppliedModifier": true,
              "modifierNameSteps": ["None", "eff_1", "eff_2", "eff_3"]
            }
          ]
        },
        //这个用unique反而有问题。改为refresh了。
        "UNIQUE_Talent_WindShield": {
          "onAdded": [
            {
              "$type": "ApplyModifier",
              "modifierName": "UNIQUE_Talent_WindShield_Timer"
            }
          ],
          "duration": 10, //
          "stacking": "RefreshUniqueDurability",
          "isUnique": true,
          "onBeingHit": [
            {
              "$type": "AddGlobalValue",
              "key": "_ABILITY_QinWindShield_COUNT",
              "value": -1,
              "useLimitRange": true,
              "maxValue": 3,
              "minValue": 0,
              "predicates": [
                {
                  "$type": "ByHitDamage",
                  "damage": 0,
                  "logic": "Greater"
                }
              ]
            }
          ],
          "onKill": [
            {
              "$type": "AddGlobalValue",
              "key": "_ABILITY_QinWindShield_COUNT",
              "value": -3,
              "useLimitRange": true,
              "maxValue": 0,
              "minValue": 0,
              "doOffStage": true
            }
          ],
          "onRemoved": [
            {
              "$type": "AddGlobalValue",
              "key": "_ABILITY_QinWindShield_COUNT",
              "value": -3,
              "useLimitRange": true,
              "maxValue": 0,
              "minValue": 0,
              "doOffStage": true
            }
          ]
        },
        "None": {
          "onAdded": [
            {
              "$type": "SendEffectTrigger",
              "parameter": "Level_0",
              "effectPattern": "Eff_Avatar_Lady_Sword_Qin_TalentShield"
            }
          ],
          "thinkInterval": 0.4,
          "onThinkInterval": [
            {
              "$type": "RemoveUniqueModifier",
              "doOffStage": true,
              "modifierName": "UNIQUE_Talent_WindShield" //可以这个时候只remove特效，不removebuff，那么在阵里也不会重复添加buff。（阵11秒，按interval算，只会tic十次，正好不够加上新buff）
              //但是好像没有remove特效的指令,只能干掉modifier了。
            },
            {
              "$type": "RemoveUniqueModifier",
              "doOffStage": true,
              "modifierName": "UNIQUE_Talent_WindShield_Timer"
            }
          ]
        },
        "eff_1": {
          "onAdded": [
            {
              "$type": "SendEffectTrigger",
              "parameter": "Level_1",
              "effectPattern": "Eff_Avatar_Lady_Sword_Qin_TalentShield"
            }
          ],
          "isLimitedProperties": true,
          "properties": {
            "Actor_SubHurtDelta": "%LessHurt"
          }
        },
        "eff_2": {
          "onAdded": [
            {
              "$type": "SendEffectTrigger",
              "parameter": "Level_2",
              "effectPattern": "Eff_Avatar_Lady_Sword_Qin_TalentShield"
            }
          ],
          "isLimitedProperties": true,
          "properties": {
            "Actor_SubHurtDelta": "%LessHurt"
          }
        },
        "eff_3": {
          "onAdded": [
            {
              "$type": "SendEffectTrigger",
              "parameter": "Level_3",
              "effectPattern": "Eff_Avatar_Lady_Sword_Qin_TalentShield"
            }
          ],
          "isLimitedProperties": true,
          "properties": {
            "Actor_SubHurtDelta": "%LessHurt"
          }
        }
      },
      "abilitySpecials": {
        "BurstHeal": 0, //治疗系数
        "Heal": 0,
        // "SlowRate":-0.25, //不再减速了
        "WindHurt": 0, //怪物受到风抗下降
        "LessHurt": 0, //天赋盾减伤
        "BurstHealConst": 0,
        "HealConst": 0
      }
    }
  },
  {
    //技能：给进出法术场的怪予以伤害
    "Default": {
      "$type": "ConfigAbility",
      "abilityName": "Avatar_Qin_DandelionWind_Harm",
      //开场击退
      "onAdded": [],
      //一旦有怪物进来就干它
      "onFieldEnter": [
        {
          "$type": "ApplyModifier",
          "target": "Target",
          "modifierName": "Avatar_Qin_DandelionWind_Harm_FieldDamage", //多个琴field也应该能生效，不能unique
          "predicates": [
            {
              "$type": "ByEntityTypes",
              "entityTypes": ["Monster"]
            }
          ]
        }
      ],
      //一旦有怪物出去也干它
      "onFieldExit": [
        {
          "$type": "ApplyModifier",
          "target": "Target",
          "modifierName": "Avatar_Qin_DandelionWind_Harm_FieldDamage",
          "predicates": [
            {
              "$type": "ByEntityTypes",
              "entityTypes": ["Monster"]
            }
          ]
        }
      ],
      "modifiers": {
        "Avatar_Qin_DandelionWind_Harm_FieldDamage": {
          "stacking": "Unique",
          "duration": "%interval",
          "onAdded": [
            {
              "$type": "DamageByAttackValue",
              "attacker": "Caster",
              // "target":"Self",
              // "target": "Target", //x原本写在field就是target了，但是现在是在怪身上所以默认self是对的。
              "born": {
                "$type": "ConfigBornByTarget",
                "offset": {
                  "x": 0.0,
                  "y": 1.0,
                  "z": 0.0
                }
              },
              "attackInfo": {
                "attackTag": "Elemental_Burst",
                "canBeModifiedBy": "OriginOwner",
                "attackProperty": {
                  "damagePercentage": "%InOutHarm",
                  "elementType": "Wind",
                  "strikeType": "Default",
                  "elementDurability": 50,
                  "elementRank": 3,
                  "enBreak": 50
                },
                "hitPattern": {
                  "onHitEffectName": "default",
                  "hitImpulseType": "LV2",
                  // "hitLevel": "Light",	//hitlevel = 2
                  // "hitImpulseX": 200,	//hitlevel = 2
                  // "hitImpulseY": 0,	//hitlevel = 2
                  "reboundRatio": 0,
                  "hitHaltTime": 0.0,
                  "hitHaltTimeScale": 0.05,
                  "muteHitText": false
                },
                "forceCameraShake": false
              }
            }
          ]
        }
      },
      "abilitySpecials": {
        "InOutHarm": 0,
        "interval": 1
      }
    }
  },

  //技能发动推开周围敌人，因为有镜头和震屏需求。时间和生成gadget分开。
  {
    "Default": {
      "$type": "ConfigAbility",
      "abilityName": "Avatar_Qin_DandelionWind_Push",
      //创建一个法术场,制造伤害
      "onAbilityStart": [
        {
          "$type": "TriggerAttackEvent",
          "targetType": "Enemy",
          "attackEvent": {
            "attackPattern": {
              "$type": "ConfigAttackCircle",
              "triggerType": "TriggerNoRepeat",
              "fanAngle": 360.0,
              "radius": 6.0,
              "checkHitScene": true,
              "born": {
                "$type": "ConfigBornBySelf",
                "offset": {
                  "x": 0.0,
                  "y": 0.0,
                  "z": 0.0
                }
              }
            },
            "attackInfo": {
              "attackTag": "Elemental_Burst",
              "attackProperty": {
                "damagePercentage": "%Burst_DMG",
                "elementType": "Wind",
                "strikeType": "Default",
                "elementDurability": 50,
                "elementRank": 3,
                "enBreak": 400
              },
              "hitPattern": {
                "onHitEffectName": "default",
                "hitImpulseType": "LV4",
                // "hitLevel": "Heavy",	//hitlevel = 4
                // "hitImpulseX": 800,	//hitlevel = 4
                // "hitImpulseY": 0,	//hitlevel = 4
                "retreatType": "ByHitDirection",
                "reboundRatio": 0,
                "hitHaltTime": 0.0,
                "hitHaltTimeScale": 0.05,
                "muteHitText": false
              },
              "forceCameraShake": false,
              "cameraShake": {}
            }
          }
        },
        {
          "$type": "ActCameraShake",
          "cameraShake": {
            "shakeType": "CustomVector",
            "shakeRange": 0.15,
            "shakeTime": 0.12,
            "shakeDistance": 30,
            "shakeDir": {
              "x": 0,
              "y": 0,
              "z": 1
            },
            "extension": {
              "baseOnCamera": true
            }
          }
        }
      ],
      "abilitySpecials": {
        "Burst_DMG": 0
      }
    }
  },

  ////////////////////////////////////////////////////////////////
  //
  //  Speed Blur  未在使用 2020.10.12确认
  //
  ////////////////////////////////////////////////////////////////
  {
    "Default": {
      "$type": "ConfigAbility",
      "abilityName": "Avatar_SpeedBlur",
      "abilityMixins": [
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": ["Fly"],
          "modifierName": "Blur"
        }
      ],
      "modifiers": {
        "Blur": {
          "onAdded": [
            {
              "$type": "ActCameraRadialBlur",
              "cameraRadialBlur": {
                "power": 1,
                "blurTime": 0.15,
                "fadeTime": 0.3
              }
            },
            {
              "$type": "AttachEffect",
              "effectPattern": "Eff_FlyBlur"
            }
          ]
        }
      }
    }
  },
  ////////////////////////////////////////////////////////////////
  //
  //  HinowaSlash  (未在使用) 2021.4.1确认
  //
  ////////////////////////////////////////////////////////////////
  {
    "Default": {
      "$type": "ConfigAbility",
      "abilityName": "Avatar_Qin_HinowaSlash",
      "abilityMixins": [
        //CB1屏蔽空中攻击
        // {
        // 	"$type": "AvatarChangeSkillMixin",
        // 	"jumpSkillID": 10311,
        // 	"flySkillID": 10311,
        // },
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": ["HinowaSlash_Loop"],
          "modifierName": "Loop"
        },
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": ["HinowaSlash_BS", "HinowaSlash_Loop", "HinowaSlash_AS1"],
          "modifierName": "Inertia"
        }
      ],
      "modifiers": {
        "Loop": {
          "onAdded": [
            {
              "$type": "AttachEffect",
              "effectPattern": "Eff_Avatar_HinowaSlash_Loop"
            }
          ]
        },
        "Inertia": {
          "modifierMixins": [
            {
              "$type": "ApplyInertiaVelocityMixin",
              "damping": 0,
              "useXZ": true,
              "useY": false
            }
          ]
        }
      }
    }
  },

  ////////////////////////////////////////////////////////////////
  //
  //  HealRate   低血量治疗量上升
  //
  ////////////////////////////////////////////////////////////////
  {
    "Default": {
      "$type": "ConfigAbility",
      "abilityName": "Avatar_Qin_GreaterSelfHeal",
      "abilityMixins": [
        // {
        // 	"$type":"HPThresholdMixin",
        // 	"Treshold":
        // 	"modifierName":
        // },
        {
          "$type": "AttachModifierToPredicateMixin",
          "modifierName": "HealUp",
          "onEvent": "HP",
          "predicates": [
            {
              "$type": "ByTargetHPRatio",
              "target": "Self",
              "HPRatio": 0.3,
              "logic": "LesserOrEqual"
            }
          ]
        }
      ],
      "modifiers": {
        "HealUp": {
          "onAdded": [
            {
              "$type": "AttachEffect",
              "effectPattern": "Eff_Avatar_Properties_Heal_Up"
            }
          ],
          "properties": {
            "Actor_HealedAddDelta": "%Rate"
          }
        }
      },
      "abilitySpecials": {
        "Rate": 0
      }
    }
  },
  ////////////////////////////////////////////////////////////////
  //
  //  AttackCritic   命中后概率治疗队伍
  //
  ////////////////////////////////////////////////////////////////
  {
    "Default": {
      "$type": "ConfigAbility",
      "abilityName": "Avatar_Qin_AttackCritic",
      "isDynamicAbility": true,
      "onAdded": [
        {
          "$type": "AttachModifier",
          "modifierName": "Talent_HealTeam_Check"
        }
      ],
      "modifiers": {
        "Talent_HealTeam_Check": {
          "onAttackLanded": [
            {
              "$type": "Predicated",
              "target": "Target",
              "targetPredicates": [
                {
                  "$type": "ByEntityTypes",
                  "entityTypes": ["Monster"]
                },
                {
                  "$type": "ByAttackTags",
                  "attackTags": [
                    "NormalAttack_01",
                    "NormalAttack_02",
                    "NormalAttack_03",
                    "NormalAttack_04",
                    "NormalAttack_05"
                  ]
                }
              ],
              "successActions": [
                {
                  "$type": "Randomed",
                  "chance": "%Chance",
                  "successActions": [
                    {
                      "$type": "HealHP",
                      "amountByCasterAttackRatio": "%HealByAttack",
                      "target": "AllPlayerAvatars", //会包括右侧队伍角色。联机同理。
                      "predicates": [
                        {
                          "$type": "ByTargetPositionToSelfPosition",
                          "compareType": "XZ",
                          "value": 40,
                          "logic": "LesserOrEqual"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      },
      "abilitySpecials": {
        "Chance": 0,
        "HealByAttack": 0.0, //
        "BonusCritical": 0.0
      }
    }
  },
  ////////////////////////////////////////////////////////////////
  //
  //  Avatar_Qin_GetElementBall    吃球后全队加速
  //
  ////////////////////////////////////////////////////////////////
  {
    "Default": {
      "$type": "ConfigAbility",
      "abilityName": "Avatar_Qin_TeamSpeedWhenGetElementBall",
      "isDynamicAbility": true,
      "abilityMixins": [
        {
          "$type": "DoActionByEnergyChangeMixin",
          "elementTypes": [
            "Fire",
            "Water",
            "Grass",
            "Electric",
            "Ice",
            "Rock",
            "Wind"
          ],
          "doWhenEnergyMax": true,
          "onGainEnergyByBall": [
            {
              "$type": "RemoveUniqueModifier",
              "modifierName": "UNIQUE_Team_Speed_Up",
              "target": "AllPlayerAvatars",
              "predicates": [
                {
                  "$type": "ByTargetPositionToSelfPosition",
                  "compareType": "XZ",
                  "value": 40,
                  "logic": "LesserOrEqual"
                }
              ]
            },
            {
              "$type": "ApplyModifier",
              "modifierName": "UNIQUE_Team_Speed_Up",
              "target": "AllPlayerAvatars",
              "predicates": [
                {
                  "$type": "ByTargetPositionToSelfPosition",
                  "compareType": "XZ",
                  "value": 40,
                  "logic": "LesserOrEqual"
                }
              ]
            }
          ]
        }
      ],
      "modifiers": {
        "UNIQUE_Team_Speed_Up": {
          "isUnique": true,
          "state": "SpeedUp",
          "duration": "%Time",
          "elementType": "None",
          "isLimitedProperties": true,
          "properties": {
            "Animator_MoveSpeedRatio": "%Speed",
            "Animator_AttackSpeedRatio": "%AtkSpeed"
          }
        }
      },
      "abilitySpecials": {
        "Time": 0,
        "AtkSpeed": 0,
        "Speed": 0.0 //
      }
    }
  },

  ////////////////////////////////////////////////////////////////
  //
  //  固有技：普通攻击伤害变化/
  //
  ////////////////////////////////////////////////////////////////
  {
    "Default": {
      "$type": "ConfigAbility",
      "abilityName": "Avatar_Qin_NormalAttackDamage",
      "abilityMixins": [
        {
          "$type": "ModifyDamageMixin",
          "attackTags": ["NormalAttack_01"],
          "damagePercentage": "%Attack01"
        },
        {
          "$type": "ModifyDamageMixin",
          "attackTags": ["NormalAttack_02"],
          "damagePercentage": "%Attack02"
        },
        {
          "$type": "ModifyDamageMixin",
          "attackTags": ["NormalAttack_03"],
          "damagePercentage": "%Attack03"
        },
        {
          "$type": "ModifyDamageMixin",
          "attackTags": ["NormalAttack_04"],
          "damagePercentage": "%Attack04"
        },
        {
          "$type": "ModifyDamageMixin",
          "attackTags": ["NormalAttack_05"],
          "damagePercentage": "%Attack05"
        },
        {
          "$type": "ModifyDamageMixin",
          "attackTags": ["ExtraAttack"],
          "damagePercentage": "%ExtraAttack"
        }
      ],
      "modifiers": {},
      "abilitySpecials": {
        "Attack01": 0,
        "Attack02": 0,
        "Attack03": 0,
        "Attack04": 0,
        "Attack05": 0,
        "ExtraAttack": 0
      }
    }
  },
  ////////////////////////////////////////////////////////////////
  //
  //  Auto Defend  (废弃)
  //
  ////////////////////////////////////////////////////////////////
  {
    "Default": {
      "$type": "ConfigAbility",
      "abilityName": "Avatar_Qin_AutoDefend",
      "abilityMixins": [
        {
          "$type": "AutoDefenceMixin",
          "stateIDs": [
            "Attack01",
            "Attack02",
            "Attack03",
            "Attack04",
            "Attack05",
            "AutoDefend",
            "NormalStandbyWeapon"
          ],
          "defendTriggerID": "AutoDefendTrigger",
          "defendProbability": 1,
          "defendProbabilityDelta": 0,
          "defendAngle": 360.0,
          "alwaysRecover": true,
          "defendTimeInterval": "%Inv",
          "defendCountInterval": 0
        }
      ],
      "abilitySpecials": {
        //这里通过dota的C值和时机概率对比表计算的。如果没触发，下次概率为2c，再下次为3c，直到触发。
        "Prob": 0.302, //0.119等于30%理论概率，0.201等于40%理论概率，0.302等于50%理论概率，0.422等于60%理论概率，0.571等于70%理论概率。（感受不好，暂时不用）
        "Inv": 9
      }
    }
  },

  ////////////////////////////////////////////////////////////////
  //
  //  空中攻击
  //
  ////////////////////////////////////////////////////////////////
  {
    "Default": {
      "$type": "ConfigAbility",
      "abilityName": "Avatar_Qin_FallingAnthem",
      "abilityMixins": [
        {
          "$type": "AvatarChangeSkillMixin",
          "priority": "AvatarCommon",
          "jumpSkillID": 5003010,
          "flySkillID": 5003010
        },
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": ["FallingAnthem_BS"],
          "modifierName": "FallingAnthem_BS_Material"
        },
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": ["FallingAnthem_BS"],
          "modifierName": "FallingAnthem_Loop_Normal"
        },
        {
          "$type": "AttachToAnimatorStateIDMixin",
          "stateIDs": [
            "FallingAnthem_BS_2",
            "FallingAnthem_Loop",
            "FallingAnthem_Loop_Low"
          ],

          "modifierName": "FallingAnthem_LoopDamage"
        },
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": ["FallingAnthem_BS"],
          "modifierName": "FallingAnthem_BS_VelocityForce_Initialize"
        },
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": [
            "FallingAnthem_BS",
            "FallingAnthem_Loop",
            "FallingAnthem_AS_1",
            "FallingAnthem_AS_2"
          ],
          "modifierName": "FallingAnthem_Height_Detect"
        },
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": [
            "FallingAnthem_BS",
            "FallingAnthem_Loop",
            "FallingAnthem_AS_1",
            "FallingAnthem_AS_2"
          ],
          "modifierName": "FallingAnthem_FallingDamageImmune_01"
        },
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": ["FallingAnthem_BS", "FallingAnthem_Loop"],
          "modifierName": "Inertia"
        },
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": [
            "FallingAnthem_BS",
            "FallingAnthem_Loop",
            "FallingAnthem_AS_1",
            "FallingAnthem_AS_2"
          ],
          "modifierName": "FallingAnthem_OverHead_Camera"
        },
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": ["FallingAnthem_BS"],
          "modifierName": "FallingAnthem_ClearVelocityForce"
        },
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": ["FallingAnthem_AS_1", "FallingAnthem_AS_2"],
          "modifierName": "FallingAnthem_ClearVelocityForce_AS"
        },
        {
          "$type": "AttachToStateIDMixin",
          "stateIDs": ["FallingAnthem_BS", "FallingAnthem_Loop"],
          "modifierName": "FallingAnthem_AttachWeaponEffect"
        },
        {
          "$type": "AttachToAnimatorStateIDMixin",
          "stateIDs": ["FallingAnthem_BS_2"],
          "modifierName": "FallingAnthem_CameraRadialBlur"
        }
      ],
      "onAdded": [],
      "onAbilityStart": [
        //普通状态第一段
        {
          "$type": "TriggerAttackEvent",
          "targetType": "Enemy",
          "attackEvent": {
            "attackPattern": {
              "$type": "ConfigAttackCircle",
              "triggerType": "TriggerNoRepeat",
              "scale": 1.0,
              "height": 2.0,
              "centerYOffset": 0.0,
              "offsetZ": 0.0,
              "fanAngle": 360.0,
              "radius": 3.0,
              "followRootNodeY": false,
              "followTransformY": false,
              "offsetAngle": 0.0,
              "born": {
                "$type": "ConfigBornByTarget",
                "offset": {
                  "x": 0.0,
                  "y": -0.5,
                  "z": 1.0
                }
              }
            },
            "attackInfo": {
              "attackTag": "FallingAttack",
              "attackProperty": {
                "damagePercentage": "%FallingAnthem_Normal_Rank_1_Damage",
                "overrideByWeapon": true,
                "strikeType": "Blunt",
                "attackType": "Melee",
                "elementType": "None",
                "elementDurability": 25,
                "elementRank": 1.0,
                "enBreak": 100
              },
              "hitPattern": {
                "onHitEffectName": "none",
                "hitImpulseType": "LV4",
                // "hitLevel": "Heavy", //hitlevel = 4
                // "hitImpulseX": 800, //hitlevel = 4
                // "hitImpulseY": 0, //hitlevel = 4
                "retreatType": "ByAttacker",
                "reboundRatio": 0,
                "canBeDefenceHalt": false,
                "hitHaltTime": 0,
                "hitHaltTimeScale": 0.1,
                "muteHitText": false
              },
              "forceCameraShake": true,
              "cameraShake": {
                "shakeType": "CustomVector",
                "shakeRange": 0.24,
                "shakeTime": 0.12,
                "shakeDistance": 30,
                "shakeDir": {
                  "x": 0,
                  "y": 1,
                  "z": 0
                },
                "extension": {
                  "baseCycle": 0.24,
                  "cycleDamping": 0,
                  "rangeAttenuation": 0.3
                }
              }
            }
          },
          "predicates": [
            {
              "$type": "ByTargetGlobalValue",
              "key": "_ABILITY_FallingAnthem_UseCamera",
              "forceByCaster": true,
              "value": 0,
              "compareType": "NoneOrEqual"
            }
          ]
        },
        //普通状态第二段
        {
          "$type": "TriggerAttackEvent",
          "targetType": "Enemy",
          "attackEvent": {
            "attackPattern": {
              "$type": "ConfigAttackCircle",
              "triggerType": "TriggerNoRepeat",
              "scale": 1.0,
              "height": 2.0,
              "centerYOffset": 0.0,
              "offsetZ": 0.0,
              "fanAngle": 360.0,
              "radius": 5.0,
              "followRootNodeY": false,
              "followTransformY": false,
              "offsetAngle": 0.0,
              "born": {
                "$type": "ConfigBornByTarget",
                "offset": {
                  "x": 0.0,
                  "y": -0.5,
                  "z": 1.0
                }
              }
            },
            "attackInfo": {
              "attackTag": "FallingAttack",
              "attackProperty": {
                "damagePercentage": "%FallingAnthem_Normal_Rank_2_Damage",
                "overrideByWeapon": true,
                "strikeType": "Blunt",
                "attackType": "Melee",
                "elementType": "None",
                "elementDurability": 25,
                "elementRank": 1.0,
                "enBreak": 150
              },
              "hitPattern": {
                "onHitEffectName": "none",
                "hitImpulseType": "LV7",
                // "hitLevel": "Air", //hitlevel = 7
                // "hitImpulseX": 0, //hitlevel = 7
                // "hitImpulseY": 800, //hitlevel = 7
                "retreatType": "ByAttacker",
                "reboundRatio": 0,
                "canBeDefenceHalt": false,
                "hitHaltTime": 0,
                "hitHaltTimeScale": 0.1,
                "muteHitText": false
              },
              "forceCameraShake": true,
              "cameraShake": {
                "shakeType": "CustomVector",
                "shakeRange": 0.5,
                "shakeTime": 0.2,
                "shakeDistance": 30,
                "shakeDir": {
                  "x": 0,
                  "y": 1,
                  "z": 1
                },
                "extension": {
                  "baseCycle": 0.4,
                  "cycleDamping": 0,
                  "rangeAttenuation": 0.3
                }
              }
            }
          },
          "predicates": [
            {
              "$type": "ByTargetGlobalValue",
              "key": "_ABILITY_FallingAnthem_UseCamera",
              "forceByCaster": true,
              "value": 1,
              "compareType": "Equal"
            }
          ]
        },
        //普通状态第一段
        {
          "$type": "FireEffect",
          "effectPattern": "Eff_Avatar_Sword_FallAnthem_Strike_01",
          "predicates": [
            {
              "$type": "ByTargetGlobalValue",
              "key": "_ABILITY_FallingAnthem_UseCamera",
              "forceByCaster": true,
              "value": 0,
              "compareType": "NoneOrEqual"
            }
          ]
        },
        //普通状态第二段
        {
          "$type": "FireEffect",
          "effectPattern": "Eff_Avatar_Sword_FallAnthem_Strike_02",
          "predicates": [
            {
              "$type": "ByTargetGlobalValue",
              "key": "_ABILITY_FallingAnthem_UseCamera",
              "forceByCaster": true,
              "value": 1,
              "compareType": "Equal"
            }
          ]
        }
      ],
      "modifiers": {
        "FallingAnthem_AttachWeaponEffect": {
          "onAdded": [
            {
              "$type": "AttachEffect",
              "effectPattern": "Eff_Avatar_Sword_FallAnthem_Self_01"
            }
          ]
        },
        "FallingAnthem_CameraRadialBlur": {
          "duration": 0.23,
          "modifierMixins": [
            {
              "$type": "CameraBlurMixin",
              "cameraRadialBlur": {
                "power": 0.3,
                "fadeTime": 0.15
              }
            }
          ]
        },
        "FallingAnthem_BS_Material": {
          "onAdded": [
            {
              "$type": "FireEffect",
              "effectPattern": "Eff_Avatar_Sword_FallAnthem_BS"
            }
          ]
        },
        "FallingAnthem_BS_VelocityForce_Initialize": {
          "properties": {
            "Actor_AddGravityScale": -2
          },
          "onAdded": [
            {
              "$type": "RemoveVelocityForce",
              "forces": ["RushMoveType"]
            }
          ]
        },
        "FallingAnthem_LoopDamage": {
          "thinkInterval": 0.3,
          "onThinkInterval": [
            {
              "$type": "TriggerAttackEvent",
              "targetType": "Enemy",
              "attackEvent": {
                "attackPattern": {
                  "$type": "ConfigAttackSphere",
                  "triggerType": "TriggerNoRepeat",
                  "radius": 1.0,
                  "born": {
                    "$type": "ConfigBornBySelf",
                    "offset": {
                      "x": 0.0,
                      "y": 0.0,
                      "z": 1
                    }
                  }
                },
                "attackInfo": {
                  "attackTag": "FallingAttack",
                  "attackProperty": {
                    "damagePercentage": "%FallingAnthem_Normal_Loop_Damage",
                    "strikeType": "Slash",
                    "overrideByWeapon": true,
                    "attackType": "Melee",
                    "elementType": "None",
                    "elementDurability": 0,
                    "enBreak": 25
                  },
                  "hitPattern": {
                    "onHitEffectName": "default",
                    "hitImpulseType": "LV2",
                    // "hitLevel": "Light", //hitlevel = 2
                    // "hitImpulseX": 200, //hitlevel = 2
                    // "hitImpulseY": 0, //hitlevel = 2
                    "reboundRatio": 0,
                    "canBeDefenceHalt": false,
                    "hitHaltTime": 0,
                    "hitHaltTimeScale": 0.02,
                    "muteHitText": false
                  }
                }
              }
            }
          ]
        },
        "FallingAnthem_FallingDamageImmune_01": {
          "onAdded": [
            {
              "$type": "ClearGlobalValue",
              "key": "_ABILITY_FallingAttack_Altitude"
            },
            {
              "$type": "AddGlobalValue",
              "key": "_ABILITY_FallingAttack_Altitude",
              "value": "%FallingAnthem_FallingDamageRatio_Lv0",
              "useLimitRange": true,
              "maxValue": "%FallingAnthem_FallingDamageRatio_Lv0",
              "minValue": "%FallingAnthem_FallingDamageRatio_Lv0",
              "predicates": [
                {
                  "$type": "ByTargetAltitude",
                  "value": "%FallingAnthem_Altitude_Lv0",
                  "logic": "LesserOrEqual"
                }
              ]
            }, //==================================================================================
            {
              "$type": "AddGlobalValue",
              "key": "_ABILITY_FallingAttack_Altitude",
              "value": "%FallingAnthem_FallingDamageRatio_Lv1",
              "useLimitRange": true,
              "maxValue": "%FallingAnthem_FallingDamageRatio_Lv1",
              "minValue": "%FallingAnthem_FallingDamageRatio_Lv1",
              "predicates": [
                {
                  "$type": "ByTargetAltitude",
                  "value": "%FallingAnthem_Altitude_Lv1",
                  "logic": "LesserOrEqual"
                },
                {
                  "$type": "ByTargetAltitude",
                  "value": "%FallingAnthem_Altitude_Lv0",
                  "logic": "Greater"
                }
              ]
            }, //==================================================================================
            {
              "$type": "AddGlobalValue",
              "key": "_ABILITY_FallingAttack_Altitude",
              "value": "%FallingAnthem_FallingDamageRatio_Lv2",
              "useLimitRange": true,
              "maxValue": "%FallingAnthem_FallingDamageRatio_Lv2",
              "minValue": "%FallingAnthem_FallingDamageRatio_Lv2",
              "predicates": [
                {
                  "$type": "ByTargetAltitude",
                  "value": "%FallingAnthem_Altitude_Lv2",
                  "logic": "LesserOrEqual"
                },
                {
                  "$type": "ByTargetAltitude",
                  "value": "%FallingAnthem_Altitude_Lv1",
                  "logic": "Greater"
                }
              ]
            }, //==================================================================================
            {
              "$type": "AddGlobalValue",
              "key": "_ABILITY_FallingAttack_Altitude",
              "value": "%FallingAnthem_FallingDamageRatio_Lv3",
              "useLimitRange": true,
              "maxValue": "%FallingAnthem_FallingDamageRatio_Lv3",
              "minValue": "%FallingAnthem_FallingDamageRatio_Lv3",
              "predicates": [
                {
                  "$type": "ByTargetAltitude",
                  "value": "%FallingAnthem_Altitude_Lv3",
                  "logic": "LesserOrEqual"
                },
                {
                  "$type": "ByTargetAltitude",
                  "value": "%FallingAnthem_Altitude_Lv2",
                  "logic": "Greater"
                }
              ]
            }, //==================================================================================
            {
              "$type": "AddGlobalValue",
              "key": "_ABILITY_FallingAttack_Altitude",
              "value": "%FallingAnthem_FallingDamageRatio_Lv4",
              "useLimitRange": true,
              "maxValue": "%FallingAnthem_FallingDamageRatio_Lv4",
              "minValue": "%FallingAnthem_FallingDamageRatio_Lv4",
              "predicates": [
                {
                  "$type": "ByTargetAltitude",
                  "value": "%FallingAnthem_Altitude_Lv3",
                  "logic": "Greater"
                }
              ]
            }, //==================================================================================

            {
              "$type": "AttachModifier",
              "modifierName": "FallingAnthem_FallingDamageImmune_02"
            }
          ]
        },
        "FallingAnthem_FallingDamageImmune_02": {
          "onAdded": [
            {
              "$type": "SetGlobalValueToOverrideMap",
              "globalValueKey": "_ABILITY_FallingAttack_Altitude",
              "overrideMapKey": "FallingAnthem_FallingDamageRatio"
            },
            {
              "$type": "AttachModifier",
              "modifierName": "FallingAnthem_FallingDamageImmune_03"
            }
          ]
        },
        "FallingAnthem_FallingDamageImmune_03": {
          "properties": {
            "Actor_FallingDamageRatio": "%FallingAnthem_FallingDamageRatio"
          }
        },
        "FallingAnthem_Loop_Normal": {
          "modifierMixins": [
            {
              "$type": "AttachModifierToSelfGlobalValueMixin",
              "globalValueKey": "_ABILITY_FallingAnthem_UseCamera",
              "valueSteps": [-1, 0.5, 1.5],
              "removeAppliedModifier": true,
              "modifierNameSteps": [
                "FallingAnthem_Loop_Normal_Rank_1",
                "FallingAnthem_Loop_Normal_Rank_2"
              ]
            }
          ]
        },
        "FallingAnthem_Loop_Normal_Rank_1": {
          "onAdded": [
            {
              "$type": "AttachEffect",
              "effectPattern": "Eff_Avatar_Sword_FallAnthem_Loop_01"
            }
          ]
        },
        "FallingAnthem_Loop_Normal_Rank_2": {
          "onAdded": [
            {
              "$type": "AttachEffect",
              "effectPattern": "Eff_Avatar_Sword_FallAnthem_Loop_02"
            }
          ]
        },
        //水平惯性继承
        "Inertia": {
          "modifierMixins": [
            {
              "$type": "ApplyInertiaVelocityMixin",
              "damping": 0,
              "useXZ": false,
              "useY": false
            }
          ]
        },
        "FallingAnthem_Height_Detect": {
          "onAdded": [
            {
              "$type": "AddGlobalValue",
              "key": "_ABILITY_FallingAnthem_UseCamera",
              "value": 0,
              "useLimitRange": true,
              "maxValue": 0,
              "minValue": 0,
              "predicates": [
                {
                  "$type": "ByTargetAltitude",
                  "value": 2.4,
                  "logic": "LesserOrEqual"
                }
              ]
            },
            {
              "$type": "AddGlobalValue",
              "key": "_ABILITY_FallingAnthem_UseCamera",
              "value": 5,
              "useLimitRange": true,
              "maxValue": 1,
              "minValue": 0,
              "predicates": [
                {
                  "$type": "ByTargetAltitude",
                  "value": 2.4,
                  "logic": "Greater"
                }
              ]
            },
            {
              "$type": "SetAnimatorFloat",
              "floatID": "FallingAnthem_UseCamera",
              "value": 0,
              "predicates": [
                {
                  "$type": "ByTargetAltitude",
                  "value": 2.4,
                  "logic": "LesserOrEqual"
                }
              ]
            },
            {
              "$type": "SetAnimatorFloat",
              "floatID": "FallingAnthem_UseCamera",
              "value": 1,
              "predicates": [
                {
                  "$type": "ByTargetAltitude",
                  "value": 2.4,
                  "logic": "Greater"
                }
              ]
            }
          ],
          "onRemoved": [
            {
              "$type": "SetAnimatorFloat",
              "floatID": "FallingAnthem_UseCamera",
              "value": 0
            },
            {
              "$type": "AddGlobalValue",
              "key": "_ABILITY_FallingAnthem_UseCamera",
              "value": 0,
              "useLimitRange": true,
              "maxValue": 0,
              "minValue": 0
            }
          ]
        },
        "FallingAnthem_OverHead_Camera": {
          "onAdded": [
            {
              "$type": "AvatarCameraParam",
              "lockParam": false,
              "cameraParam": {
                "forceRadius": 4.5,
                "forceRadiusDuration": 0.2,
                "shouldKeepForceRadius": true
              },
              "predicates": [
                {
                  "$type": "ByAnimatorFloat",
                  "parameter": "FallingAnthem_UseCamera",
                  "value": 1,
                  "logic": "Equal"
                }
              ]
            }
          ]
        },
        "FallingAnthem_OverHead_Camera_Remover": {
          "onAdded": [
            {
              "doOffStage": true,
              "$type": "AvatarExitCameraShot"
            }
          ]
        },
        "FallingAnthem_Landed_Camera": {
          "onAdded": [
            {
              "$type": "AvatarCameraParam",
              "lockParam": false,
              "cameraParam": {
                "forceRadius": 6.0,
                "forceRadiusDuration": 0.1,
                "shouldKeepForceRadius": true
              },
              "predicates": [
                {
                  "$type": "ByAnimatorFloat",
                  "parameter": "FallingAnthem_UseCamera",
                  "value": 1,
                  "logic": "Equal"
                }
              ]
            }
          ]
        },
        "FallingAnthem_ClearVelocityForce": {
          "onAdded": [
            {
              "$type": "RemoveVelocityForce",
              "forces": ["RushMoveType", "InertiaType"]
            }
          ]
        },
        "FallingAnthem_ClearVelocityForce_AS": {
          "onAdded": [
            {
              "$type": "RemoveVelocityForce",
              "forces": ["RushMoveType", "InertiaType"]
            }
          ]
        }
      },
      "abilitySpecials": {
        "FallingAnthem_Normal_Loop_Damage": 0,
        "FallingAnthem_Normal_Rank_1_Damage": 0,
        "FallingAnthem_Normal_Rank_2_Damage": 0,

        "FallingAnthem_Altitude_Lv0": 20,
        "FallingAnthem_Altitude_Lv1": 40,
        "FallingAnthem_Altitude_Lv2": 60,
        "FallingAnthem_Altitude_Lv3": 100,
        "FallingAnthem_Altitude_Lv4": 200,

        "FallingAnthem_FallingDamageRatio_Lv0": -1,
        "FallingAnthem_FallingDamageRatio_Lv1": -1,
        "FallingAnthem_FallingDamageRatio_Lv2": -0.9,
        "FallingAnthem_FallingDamageRatio_Lv3": -0.8,
        "FallingAnthem_FallingDamageRatio_Lv4": -0.6,

        "FallingAnthem_FallingDamageRatio": 0
      }
    }
  }
]
